<<<<<<< HEAD
public class Text {
    public static int process(int[]arr,int L,int R){
        if(L==R){
            return 0;
        }
        int mid=L+((R-L)>>1);
        return process(arr,L,mid)+ process(arr,mid+1,R)+ merge(arr,L,mid,R);
    }
    public static int merge(int[] arr,int L,int M,int R){
        int[] help=new int[R-L+1];
        int p1=L;
        int p2=M+1;
        int i=0;
        int cur=0;
        while(p1<=M&&p2<=R){
            cur+=arr[p1]<arr[p2]?arr[p1]*(R-p2+1):0;
            help[i++]=arr[p1]>=arr[p2]?arr[p2++]:arr[p1++];
        }
        while(p1<=M){
            help[i++]=arr[p1++];
        }
        while(p2<=R){
            help[i++]=arr[p2++];
        }
        for(i=0;i<help.length;i++){
            arr[L+i]=help[i];
        }
        return cur;
    }
    public static void main(String[] args) {
        int[] arr={1,3,4,2,5};
        System.out.println(process(arr,0, arr.length-1));
    }
}
=======
public class Text {
    public static int process(int[]arr,int L,int R){
        if(L==R){
            return 0;
        }
        int mid=L+((R-L)>>1);
        return process(arr,L,mid)+ process(arr,mid+1,R)+ merge(arr,L,mid,R);
    }
    public static int merge(int[] arr,int L,int M,int R){
        int[] help=new int[R-L+1];
        int p1=L;
        int p2=M+1;
        int i=0;
        int cur=0;
        while(p1<=M&&p2<=R){
            cur+=arr[p1]<arr[p2]?arr[p1]*(R-p2+1):0;
            help[i++]=arr[p1]>=arr[p2]?arr[p2++]:arr[p1++];
        }
        while(p1<=M){
            help[i++]=arr[p1++];
        }
        while(p2<=R){
            help[i++]=arr[p2++];
        }
        for(i=0;i<help.length;i++){
            arr[L+i]=help[i];
        }
        return cur;
    }
    public static void main(String[] args) {
        int[] arr={1,3,4,2,5};
        System.out.println(process(arr,0, arr.length-1));
    }
}
>>>>>>> a6b40fe4da52147722d87427900dda54f98b6f80
