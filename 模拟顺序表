class MyArrList<E>{
    private Object[] elementData;
    private int useSize;

    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

    private static final int DEFAULT_CAPACITY=10;

    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

    public MyArrList(){
        this.elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }
    //对参数进行判断;
    public MyArrList(int capacity){
        if(capacity>0){
            this.elementData=new Object[capacity];
        }else if(capacity==0){
            this.elementData=new Object[0];
        }else{
            throw new  IllegalArgumentException("初始化容量错误!");
        }
    }
    //
    public boolean add(E e){
        ensureCapacityInternal(useSize + 1);
        this.elementData[useSize++]=e;
        return true;
    }

    private void ensureCapacityInternal(int minCapacity){
        //计算出相应的容量
        int str=calculateCapacity(this.elementData,minCapacity);
        //判断是否需要扩容
        ensureExplicitCapacity(str);
    }
    private int calculateCapacity(Object[] elementData,int minCapacity){
        if(this.elementData==DEFAULTCAPACITY_EMPTY_ELEMENTDATA){
            return Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        return minCapacity;
    }
    private void ensureExplicitCapacity(int minCapacity){
        if (minCapacity - this.elementData.length > 0)
            //扩容
            grow(minCapacity);
    }
    private void grow(int minCapacity){
        int oldCapacity=this.elementData.length;
        int newCapacity=oldCapacity+(oldCapacity>>1);
        if(newCapacity-minCapacity<0){
           newCapacity=minCapacity;
        }
        if(newCapacity-MAX_ARRAY_SIZE>0){
            newCapacity=huge(minCapacity);
        }
        this.elementData=Arrays.copyOf(this.elementData,newCapacity);
    }
    private int huge(int minCapacity){
        if(minCapacity<0){
            throw new OutOfMemoryError();
        }
        return (minCapacity > MAX_ARRAY_SIZE) ?
                Integer.MAX_VALUE :
                MAX_ARRAY_SIZE;
    }
    public int size(){
        return this.useSize;
    }

    public void add(int index,E element){
        //检查下标是否合法
        rangeCheckForAdd(index);
        //给一个明确的容量
        ensureCapacityInternal(useSize + 1);
        int move=size()-index;
        //挪数据
        System.arraycopy(this.elementData,index,this.elementData,index+1,move);
        elementData[index]=element;
        useSize++;
    }
    private void rangeCheckForAdd(int index){
        if(index<0||index>size()){
            throw new IndexOutOfBoundsException("index位置不合法！");
        }
    }
    @Override
    public String toString() {
        return "MyArrList{" +
                "elementData=" + Arrays.toString(elementData) +
                ", useSize=" + useSize +
                '}';
    }
}
public class TextDemo4 {
    public static void main(String[] args) {
        MyArrList<Integer> myArrList=new MyArrList<>();
        myArrList.add(1);
        myArrList.add(2);
        myArrList.add(3);
        myArrList.add(3,222);
        System.out.println(myArrList);
    }
}
