public class HeadSort {
    public static void heapSort(int[] arr){
        if(arr==null||arr.length<2){
            return;
        }
        int heapSize=arr.length;
//        for(int i=0;i<heapSize;i++){  //O(N)
//            heapInsert(arr,i);  //O(logN)
//        }

        for(int i=heapSize-1;i>=0;i--){ //比heapInsert更快
            heapify(arr,i,heapSize);
        }
        swap(arr,0,--heapSize);
        while(heapSize>0){  //O(N)
            heapify(arr,0,heapSize);  //O(logN)
            swap(arr,0,--heapSize);   //O(1)
        }
    }
    public static void heapify(int[] arr,int index,int heapSize){
        int left=index*2+1;
        while(left<heapSize){
            int largest = left + 1 < heapSize && arr[left + 1] > arr[left] ? left + 1 : left;
            largest=arr[largest]>arr[index]?largest:index;
            if(largest==index){
                break;
            }
            swap(arr,index,largest);
            index=largest;
            left=index*2+1;
        }
    }
    public static void heapInsert(int[] arr,int index){
        while(arr[index]>arr[(index-1)/2]){
            swap(arr,index,(index-1)/2);
            index=(index-1)/2;
        }
    }
    public static void main(String[] args) {
        int[] arr={4,3,7,9,2,1,8};
        heapSort(arr);
        System.out.println(Arrays.toString(arr));
    }
    public static void swap(int[] arr,int i,int j){
        int tmp=arr[i];
        arr[i]=arr[j];
        arr[j]=tmp;
    }
}
