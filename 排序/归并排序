//递归
public class TextDemo {
    public static void main(String[] args) {
        int[] arr={8,9,1,7,2,3,5,4,1,0};
        mergeSort(arr,0,arr.length - 1);
        System.out.println(Arrays.toString(arr));
    }
    public static void mergeSort(int[] arr,int L,int R) {
        if (L == R) {
            return;
        }
        int mid = L + ((R - L) >> 1);
        mergeSort(arr,L,mid );
        mergeSort(arr,mid + 1,R);
        mergeArray(arr,mid,L,R);
    }
    public static void mergeArray(int[] arr,int mid,int L,int R) {
        int l = L;
        int r = mid + 1;
        int[] crr = new int[R - L + 1];
        int i = 0;
        while (l <= mid && r <= R) {
            crr[i++] = arr[l] < arr[r] ? arr[l++] : arr[r++];
        }
        while (l <= mid) {
            crr[i++] = arr[l++];
        }
        while (r <= R) {
            crr[i++] = arr[r++];
        }
        for (i = 0;i < crr.length; i++) {
            arr[L + i] = crr[i];
        }
    }
}
public class Text {
    public static void process(int[]arr,int L,int R){
        if(L==R){
            return;
        }
        int mid=L+((R-L)>>1);
        process(arr,L,mid);
        process(arr,mid+1,R);
        merge(arr,L,mid,R);
    }
    public static void merge(int[] arr,int L,int M,int R){
        int[] help=new int[R-L+1];
        int p1=L;
        int p2=M+1;
        int i=0;
        while(p1<=M&&p2<=R){
            help[i++]=arr[p1]>arr[p2]?arr[p2++]:arr[p1++];
        }
        while(p1<=M){
            help[i++]=arr[p1++];
        }
        while(p2<=R){
            help[i++]=arr[p2++];
        }
        for(i=0;i<R-L+1;i++){
            arr[L+i]=help[i];
        }
    }
    public static void main(String[] args) {
        int[] arr={6,5,4,3,2,7,8,9};
        process(arr,0,arr.length-1);
        System.out.println(Arrays.toString(arr));
    }
}

//非递归

