class BinaryTree{
    //前序遍历
    public void preOrder(ListNode listNode){
        if(listNode==null){
            return;
        }
        System.out.println(listNode);
        preOrder(listNode.getLeft());
        preOrder(listNode.getRight());
    }
    //中序遍历
    public void infixOrder(ListNode listNode){
        if(listNode==null){
            return;
        }
        infixOrder(listNode.getLeft());
        System.out.println(listNode);
        infixOrder(listNode.getRight());
    }
    //后序遍历
    public void postOrder(ListNode listNode){
        if(listNode==null){
            return;
        }
        postOrder(listNode.getLeft());
        postOrder(listNode.getRight());
        System.out.println(listNode);
    }
    //前序查找
    public ListNode preOrderFind(ListNode listNode,int val){
        System.out.print("1 ");//代表查找次数
        if(listNode.getNo()==val){  //判断当前的节点是否为要查找的节点
            return listNode;
        }
        ListNode listNode1=null;
        if(listNode.getLeft()!=null){ //如果左子树不为空，判断左子树上是否有要查找的节点
            listNode1=preOrderFind(listNode.getLeft(),val);
        }
        if(listNode1!=null){  //如果在左子树上找到了，就直接返回
            return listNode1;
        }
        if(listNode.getRight()!=null){ //如果左子树上没找到，就查找右子树
            listNode1=preOrderFind(listNode.getRight(),val);
        }
        return listNode1;  //不管右子树是否找到，结束都会直接返回
    }
    //中序查找
    public ListNode infixOrderFind(ListNode listNode,int val){
        ListNode listNode1=null;
        if(listNode.getLeft()!=null){
            listNode1=infixOrderFind(listNode.getLeft(),val);
        }
        if(listNode1!=null){
            return listNode1;
        }
        System.out.print("2 ");
        if(listNode.getNo()==val){
            return listNode;
        }
        if(listNode.getRight()!=null){
            listNode1=infixOrderFind(listNode.getRight(),val);
        }
        return listNode1;
    }
    //后序查找
    public  ListNode postOrderFind(ListNode listNode,int val){
        ListNode listNode1=null;
        if(listNode.getLeft()!=null){
            listNode1=postOrderFind(listNode.getLeft(),val);
        }if(listNode1!=null){
            return listNode1;
        }
        if(listNode.getRight()!=null){
            listNode1=postOrderFind(listNode.getRight(),val);
        }if(listNode1!=null){
            return listNode1;
        }
        System.out.print("3 ");
        if(listNode.getNo()==val){
            return listNode;
        }
        return listNode1;
    }
}
class ListNode{
    private int no;
    private String name;
    private ListNode left;
    private ListNode right;

    public ListNode(int no, String name) {
        this.no = no;
        this.name = name;
    }

    public int getNo() {
        return no;
    }

    public void setNo(int no) {
        this.no = no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ListNode getLeft() {
        return left;
    }

    public void setLeft(ListNode left) {
        this.left = left;
    }

    public ListNode getRight() {
        return right;
    }

    public void setRight(ListNode right) {
        this.right = right;
    }

    @Override
    public String toString() {
        return "ListNode{" +
                "no=" + no +
                ", name='" + name + '\'' +
                '}';
    }
}
public class TextDemo1 {
    public static void main(String[] args) {
        ListNode listNode1=new ListNode(1,"11");
        ListNode listNode2=new ListNode(2,"22");
        ListNode listNode3=new ListNode(3,"33");
        ListNode listNode4=new ListNode(4,"44");
        ListNode listNode5=new ListNode(5,"55");
        ListNode listNode6=new ListNode(6,"66");
        ListNode listNode7=new ListNode(7,"77");
        listNode1.setLeft(listNode2);
        listNode1.setRight(listNode3);
        listNode2.setLeft(listNode4);
        listNode2.setRight(listNode5);
        listNode3.setLeft(listNode6);
        listNode3.setRight(listNode7);
        BinaryTree binaryTree=new BinaryTree();
//        System.out.println("前序遍历");
//        binaryTree.preOrder(listNode1);
//        System.out.println("中序遍历");
//        binaryTree.infixOrder(listNode1);
//        System.out.println("后序遍历");
//        binaryTree.postOrder(listNode1);
        System.out.println(binaryTree.preOrderFind(listNode1, 5)); //1 2 4 5 3 6 7
        System.out.println(binaryTree.infixOrderFind(listNode1, 5));//4 2 5 1 6 3 7
        System.out.println(binaryTree.postOrderFind(listNode1, 5));//4 5 2 6 7 3 1
    }
}