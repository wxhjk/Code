class ListNode1{
    public int val;
    public ListNode1 next;
    public ListNode1(int val){
        this.val=val;
    }

}
class LinkedListStack{
    public ListNode1 head;
    public int size;
    public int usedSize=0;
    public LinkedListStack(int size){
        this.size=size;
    }
    public boolean isFull(){
        return usedSize==size;
    }
    public void push(int val){  //头插法
        if(isFull()){
            System.out.println("栈满");
            return;
        }
        ListNode1 listNode=new ListNode1(val);
        listNode.next=head;
        head=listNode;
        usedSize++;
    }

    public int pop(){
        if(head==null){
            throw new RuntimeException("栈空");
        }
        int value=head.val;
        head=head.next;
        return value;
    }

    public void list(){
        if(head==null){
            System.out.println("栈空");
            return;
        }
        ListNode1 cur=head;
        while(cur!=null){
            System.out.println(cur.val+" ");
            cur=cur.next;
        }
    }
}
public class TextDemo8 {
    public static void main(String[] args) {
        LinkedListStack linkedListStack=new LinkedListStack(6);
        linkedListStack.push(1);
        linkedListStack.push(2);
        linkedListStack.push(3);
        linkedListStack.push(4);
        linkedListStack.push(5);
        linkedListStack.push(6);
        linkedListStack.push(7);
        linkedListStack.list();
        System.out.println(linkedListStack.pop());
        System.out.println(linkedListStack.pop());
        System.out.println(linkedListStack.pop());
        System.out.println(linkedListStack.pop());
        System.out.println(linkedListStack.pop());
        System.out.println(linkedListStack.pop());
    }
}
