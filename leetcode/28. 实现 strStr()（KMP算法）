//KMP算法
class Solution {
    public int strStr(String haystack, String needle) {
        return KMP(haystack,needle,0);
    }
    public int KMP(String str,String sub,int pos) {
        if (str == null || sub == null) return -1;
        int strLen = str.length();
        int subLen = sub.length();
        if (subLen == 0) return 0;
        if (pos < 0 || pos >= strLen) return -1;

        int i = pos;
        int j = 0;
        int[] next = new int[subLen];
        getNext(next,sub);
        while (i < strLen && j < subLen) {
            if (j == -1 || str.charAt(i) == sub.charAt(j)) {
                i++;
                j++;
            }else {
                j = next[j];
            }
        }
        if (j == subLen) {
            return i - j;
        }
        return -1;
    }
    public void getNext(int[] next,String sub) {
        int k = -1;
        next[0] = k;
        int i = 1;
        while (i < sub.length()) {
            if (k == -1 || sub.charAt(i - 1) == sub.charAt(k)) {
                next[i] = k + 1;
                i++;
                k++;
            }else {
                k = next[k];
            }
        }
    }
}




class Solution {
    public int strStr(String haystack, String needle) {
        int n=needle.length();
        for(int i=0;i<=haystack.length()-n;i++){
            if(haystack.substring(i,i+n).equals(needle)){
                return i;
            }
        }
        return -1;
    }
} 
    class Solution {
    public int strStr(String haystack, String needle) {
         int n=haystack.length();
         int m=needle.length();
         for(int i=0;i<=n-m;i++){
         boolean flag=true;
         for(int j=0;j<m;j++){
             if(haystack.charAt(i+j)!=needle.charAt(j)){
                 flag =false;
            }
         }
         if(flag){
             return i;
         }
      }
      return -1;
    }
}