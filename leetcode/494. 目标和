class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        // 假设加法总和 x 减法的总和为 sum-x
        // x - (sum - x) = target;
        // x = (target + sum) / 2 问题就转换成了,要填满加法合为 x 容量的背包有多少中方法
        // 设 dp[0] = 1,因为填满加法和为 0 的方法,有一种方法,放入 0 件物品
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (target < 0) target = -target;
        if ((target + sum) % 2 == 1 || target > sum) {
            return 0;
        }
        int x = (target + sum) / 2;
        int[] dp = new int[x + 1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = x; j >= nums[i]; j--) {
                dp[j] += dp[j - nums[i]]; 
            }
        }
        return dp[x];
    }
}
