//DFS
class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> largestValues(TreeNode root) {
        DFS(root,0);
        return list;
    }
    public void DFS(TreeNode root,int deep) {
        if (root == null) {
            return;
        }
        if (list.size() > deep) {
            int max = Math.max(list.get(deep),root.val);
            list.set(deep,max);
        }else {
            list.add(deep,root.val);
        }
        DFS(root.left,deep + 1);
        DFS(root.right,deep + 1);
    }
}

//BFS
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) {
            return list;
        }
        Queue<TreeNode> qe = new LinkedList<>();
        qe.offer(root);
        while (!qe.isEmpty()) {
            int max = Integer.MIN_VALUE;
            int size = qe.size();
            while (size > 0) {
                TreeNode cur = qe.poll();
                max = cur.val > max ? cur.val : max;
                if (cur.left != null) {
                    qe.offer(cur.left);
                }
                if (cur.right != null) {
                    qe.offer(cur.right);
                }
                size--;
            }
            list.add(max);
        }
        return list;
    }
}