//递归
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       List<Integer> list=new ArrayList<>();
       preorder(list,root);
       return list; 
    }
    public void preorder(List<Integer> list,TreeNode root){
        if(root==null){
            return;
        }
        list.add(root.val);
        preorder(list,root.left);
        preorder(list,root.right);
    }
}


//迭代
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        Stack<TreeNode> stack=new Stack<>();
        if(root!=null){
            stack.push(root);
            while(!stack.isEmpty()){
                root=stack.pop();
                list.add(root.val);
                if(root.right!=null){
                    stack.push(root.right);
                }
                if(root.left!=null){
                    stack.push(root.left);           
                }
            }
        }
        return list;
    }
}
