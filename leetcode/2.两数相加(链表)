class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // int len1=0;
        // int len2=0;
        // ListNode cur1=l1;
        // ListNode cur2=l2;
        // while(cur1!=null){
        //     len1++;
        //     cur1=cur1.next;
        // }
        //  while(cur2!=null){
        //     len2++;
        //     cur2=cur2.next;
        // }
        // if(len2>len1){
        //     cur1=l2;
        //     cur2=l1;
        // }else{
        //     cur1=l1;
        //     cur2=l2;
        // }
        // ListNode ret=cur1;
        // while(cur1!=null||cur2!=null){
        //     if(cur2!=null){
        //         cur1.val=cur1.val+cur2.val;
        //     }
        //     if(cur1.val>=10){
        //         int a=cur1.val/10;
        //         cur1.val=cur1.val%10;
        //         if(cur1.next!=null){
        //             cur1.next.val=cur1.next.val+a;;
        //         }else{
        //             ListNode node=new ListNode(a);
        //             cur1.next=node;
        //         }
        //     }
        //    cur1=cur1.next;
        //    if(cur2!=null){
        //        cur2=cur2.next;
        //    }
        // }
        // return ret;
        ListNode head=new ListNode(-1);
        ListNode cur=head;
        int carry=0;
        while(l1!=null||l2!=null){
            int x=(l1==null?0:l1.val);
            int y=(l2==null?0:l2.val);
            int sum=x+y+carry;
            carry=sum/10;
            sum=sum%10;
            cur.next=new ListNode(sum);
            cur=cur.next;
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
        }
        if(carry==1){
            cur.next=new ListNode(carry);
        }
        return head.next;
    }
}