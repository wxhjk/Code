class Solution {
    public int sumOfUnique(int[] nums) {
        int sum = 0;
        Map<Integer,Integer> map = new HashMap<>();
        for (int x : nums) {
            map.put(x,map.getOrDefault(x,0) + 1);
        }
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                sum += entry.getKey();
            }
        }
        return sum;
    }
}


class Solution {
    public int sumOfUnique(int[] nums) {
        int sum = 0;
        Map<Integer,Integer> map = new HashMap<>();
        for (int x : nums) {
            if (!map.containsKey(x)) {
                sum += x;
                map.put(x,1);
            }else if (map.get(x) == 1) {
                sum -= x;
                map.put(x,2);
            }
        }
        return sum;
    }
}

//双指针
class Solution {
    public int sumOfUnique(int[] nums) {
        int sum = 0;
        int i = 0;
        int n = nums.length;
        Arrays.sort(nums);
        while (i < n) {
            int j = i;
            while (j < n && nums[i] == nums[j]) j++;
            if (j - i == 1) {
                sum += nums[i];
            }
            i = j;
        }
        return sum;
    }
}
