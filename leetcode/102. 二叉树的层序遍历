
//DFS
class Solution {
    List<List<Integer>> list = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        level(root,0);
        return list;
    }
    public void level(TreeNode root,int deep){
        if (root == null) {
            return;
        }
        deep++;
        if (list.size() < deep) {
            List<Integer> list1 = new ArrayList<>();
            list.add(list1);
        }
        list.get(deep - 1).add(root.val);
        level(root.left,deep);
        level(root.right,deep);
    }
}


class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new LinkedList<>();
        if (root == null) {
            return list;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> list1 = new LinkedList<>();
            while (size != 0) {
                TreeNode pop = queue.poll();
                list1.add(pop.val);
                if (pop.left != null) {
                    queue.offer(pop.left);
                }
                if (pop.right != null) {
                    queue.offer(pop.right);
                }
                size--;
            }
            list.add(list1);
        }
        return list;
    }
}