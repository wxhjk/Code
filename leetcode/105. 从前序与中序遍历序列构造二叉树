class Solution {
    public int i = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i],i);
        }
        return build(preorder,inorder,0,inorder.length - 1,map);
    }
    public TreeNode build(int[] preorder,int[] inorder,int l,int r,HashMap<Integer,Integer> map) {
        if (l > r) {
            return null;
        }
        int a = preorder[i++];
        TreeNode node = new TreeNode(a);
        node.left = build(preorder,inorder,l,map.get(a) - 1,map);
        node.right = build(preorder,inorder,map.get(a) + 1,r,map);
        return node;
    }
}


class Solution {
    public int i = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int l = 0;
        int r = preorder.length - 1;
        return build(preorder,inorder,l,r);
    }
    public TreeNode build(int[] preorder,int[] inorder,int l,int r) {
        if (l > r) {
            return null;
        }
        int a = preorder[i++];
        TreeNode node = new TreeNode(a);
        int x = find(inorder,a,l,r);
        node.left = build(preorder,inorder,l,x - 1);
        node.right = build(preorder,inorder,x + 1,r);
        return node;
    }
    public int find(int[] inorder, int a, int l, int r) {
        for (int i = l; i <= r; i++) {
            if (inorder[i] == a) {
                return i;
            }
        }
        return -1;
    }
}


