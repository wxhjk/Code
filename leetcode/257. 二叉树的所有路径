//回溯
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        treePath(root,path,list);
        return list;
    }
    public void treePath(TreeNode root,List<Integer> path,List<String> list) {
        path.add(root.val);
        if (root.left == null && root.right == null) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < path.size() - 1; i++) {
                sb.append(path.get(i));
                sb.append("->");
            }
            sb.append(path.get(path.size() - 1));
            list.add(sb.toString());
            return;
        }
        if (root.left != null) {
            treePath(root.left,path,list);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            treePath(root.right,path,list);
            path.remove(path.size() - 1);
        }
    }
}


//递归
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        path(list,"",root);
        return list;
    }
    public void path(List<String> list,String str,TreeNode root) {
        if (root == null) {
            return;
        }
        StringBuilder sb = new StringBuilder(str);
        sb.append(root.val);
        if (root.left == null && root.right == null) {
            list.add(sb.toString());
        }else {
            sb.append("->");
            path(list,sb.toString(),root.left);
            path(list,sb.toString(),root.right);
        }
    }
}

//迭代
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        Stack<Object> st = new Stack<>();
        if (root == null) {
            return list;
        }
        st.push(root);
        st.push(root.val + "");
        while (!st.isEmpty()) {
            String path = (String) st.pop();
            TreeNode node = (TreeNode) st.pop();
            if (node.left == null && node.right == null) {
                list.add(path);
            }
            if (node.right != null) {
                st.push(node.right);
                st.push(path + "->" + node.right.val);
            }
            if (node.left != null) {
                st.push(node.left);
                st.push(path + "->" + node.left.val);
            }
        }
        return list; 
    }
}