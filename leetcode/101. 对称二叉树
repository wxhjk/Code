//递归
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return false;
        }
        return isSym(root.left,root.right);
    }
    public boolean isSym(TreeNode root1,TreeNode root2) {
        if (root1 == null && root2 == null) return true;
        if (root1 == null || root2 == null) return false;
        if (root1.val != root2.val) return false;
        return isSym(root1.left,root2.right) && isSym(root1.right,root2.left);
    }
}
//迭代

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return false;
        }
        Queue<TreeNode> qe = new LinkedList<>();
        qe.offer(root.left);
        qe.offer(root.right);
        while (!qe.isEmpty()) {
            TreeNode left = qe.poll();
            TreeNode right = qe.poll();
            if (left == null && right == null) {
                continue;
            }
            if ((left == null || right == null )|| left.val != right.val) {
                return false;
            }
            qe.offer(left.left);
            qe.offer(right.right);
            qe.offer(left.right);
            qe.offer(right.left);
        }
        return true;
    }
}