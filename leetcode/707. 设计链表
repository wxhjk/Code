class ListNode {
    public int val;
    public ListNode next;
    public ListNode prev;
    public ListNode (int val) {
        this.val = val;
    }
}
class MyLinkedList {
    ListNode head;
    ListNode last;
    int size;
    public MyLinkedList() {
        size = 0;
    }
    
    public int get(int index) {
        if (index >= size || index < 0) {
            return -1;
        }
        ListNode cur = search(index);
        return cur.val;
    }
    
    public void addAtHead(int val) {
        ListNode node = new ListNode(val);
        if (head == null) {
            head = node;
            last = node;
        }else {
            node.next = head;
            head.prev = node;
            head = node;
        }
        size++;
    }
    
    public void addAtTail(int val) {
        ListNode node = new ListNode(val);
        if (last == null) {
            head = node;
            last = node;
        }else {
            last.next = node;
            node.prev = last;
            last = node;
        }
        size++;
    }
    
    public void addAtIndex(int index, int val) {
        if (index > size) {
            return;
        }
        if (index <= 0) {
            addAtHead(val);
        }else if (index == size) {
            addAtTail(val);
        }else {
            ListNode node = new ListNode(val);
            ListNode cur = search(index);
            cur.prev.next=node;
            node.prev=cur.prev;
            node.next=cur;
            cur.prev=node;
            size++;
        }
    }
    
    public void deleteAtIndex(int index) {
        if (index >= size || index < 0) {
            return;
        }
        if (index == 0) {
            head = head.next;
        }else if (index == size - 1){
            last = last.prev;
        }else {
            ListNode cur = search(index);
            cur.prev.next = cur.next;
            cur.next.prev = cur.prev;
        }
        size--;
    }
    public ListNode search(int index){
        ListNode cur = this.head;
        while(index != 0){
            cur = cur.next;
            index--;
        }
        return cur;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */