class Solution {
    public int maxProfit(int[] prices) {
        // 假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。
        // 相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。
        // 把利润拆分开来,最后所有正利润相加
        int result = 0;
        for (int i = 1; i < prices.length; i++) {
            result += Math.max(prices[i] - prices[i - 1],0);
        }
        return result;
    }
}


class Solution {
    public int maxProfit(int[] prices) {
        int[] dp = new int[2];
        dp[0] = -prices[0];
        dp[1] = 0;
        for (int i = 1; i < prices.length; i++) {
            dp[0] = Math.max(dp[1] - prices[i],dp[0]);
            dp[1] = Math.max(dp[1],dp[0] + prices[i]);
        }
        return dp[1];
    }
}

class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i = 1 ; i < prices.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][1] - prices[i],dp[i - 1][0]);
            dp[i][1] = Math.max(dp[i - 1][0] + prices[i],dp[i - 1][1]); 
        }
        return dp[prices.length - 1][1];
    }
}
