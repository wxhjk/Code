class Solution {
    List<List<Integer>> result = new LinkedList<>();
    List<Integer> list = new LinkedList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] user = new boolean[nums.length];
        Arrays.fill(user,false);
        Arrays.sort(nums);
        back(nums,user);
        return result;
    }
    public void back(int[] nums,boolean[] user) {
        if (list.size() == nums.length) {
            result.add(new LinkedList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1] && user[i - 1] == false) {
                continue;
            }
            if (user[i] == false) {
                user[i] = true;
                list.add(nums[i]);
                back(nums,user);
                list.remove(list.size() - 1);
                user[i] = false;
            }
        }
    }
}