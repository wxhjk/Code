//BFS
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> qe = new LinkedList<>();
        qe.offer(root);
        int deep = 0;
        while (!qe.isEmpty()) {
            int size = qe.size();
            deep++;
            while (size > 0) {
                TreeNode cur = qe.poll();
                if (cur.left == null && cur.right == null) {
                    return deep;
                }
                if (cur.left != null) {
                    qe.offer(cur.left);
                }
                if (cur.right != null) {
                    qe.offer(cur.right);
                }
                size--;
            }
        }
        return deep;
    }
}


class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null) {
            return minDepth(root.right) + 1;
        }
        if (root.right == null) {
            return minDepth(root.left) + 1;
        }
        return Math.min(minDepth(root.left),minDepth(root.right)) + 1;
    }
}

