
//Dfs
class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        Dfs(root,0);
        return list;
    }
    public void Dfs(TreeNode root,int deep) {
        if (root == null) {
            return;
        }
        if (deep == list.size()) {
            list.add(root.val);
        }
        deep++;
        Dfs(root.right,deep);
        Dfs(root.left,deep);
    }
}

//Bfs
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) {
            return list;
        }
        Queue<TreeNode> qe = new LinkedList<>();
        qe.offer(root);
        while (!qe.isEmpty()) {
            int size = qe.size();
            int x = size;
            while (size > 0) {
                TreeNode cur = qe.poll();
                if (size == x) {
                    list.add(cur.val);
                }
                if (cur.right != null) {
                    qe.offer(cur.right);
                }
                if (cur.left != null) {
                    qe.offer(cur.left);
                }
                size--;
            }
        }
        return list;
    }
}