1.直接排序
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i=0;i<n;i++){
            nums1[m+i]=nums2[i];
        }
        Arrays.sort(nums1);
    }
}

2.双指针 
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       int p1=0;
       int p2=0;
       int[] sort=new int[m+n];
       while(p1<m||p2<n){
           int cur=0;
           if(p1==m){
               cur=nums2[p2++];
           }
           else if(p2==n){
               cur=nums1[p1++];
           }
           else if(nums1[p1]<nums2[p2]){
               cur=nums1[p1++];
           }
           else{
               cur=nums2[p2++];
           }
           sort[p1+p2-1]=cur;
       }
       for(int i=0;i<m+n;i++){
           nums1[i]=sort[i];
       }
    }
}

3.逆向双指针
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       int p1=m-1;
       int p2=n-1;
       int tail=m+n-1;
       while(p1>=0||p2>=0){
           int cur=0;
           if(p1==-1){
               cur=nums2[p2--];
           }
           else if(p2==-1){
               cur=nums1[p1--];
           }
           else if(nums1[p1]>nums2[p2]){
               cur=nums1[p1--];
           }
           else{
               cur=nums2[p2--];
           }
           nums1[tail--]=cur;
       }
    }
}