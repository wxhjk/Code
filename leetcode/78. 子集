class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> list = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        result.add(list);
        dfs(nums,0);
        return result;
    }
    public void dfs(int[] nums,int start) {
        if (list.size() == nums.length) {
            return;
        }
        for (int i = start; i < nums.length; i++) {
            list.add(nums[i]);
            dfs(nums,i + 1);
            result.add(new ArrayList<>(list));
            list.remove(list.size() - 1);
        }
    }
}

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> list = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        dfs(nums,0);
        return result;
    }
    public void dfs(int[] nums,int start) {
        result.add(new ArrayList<>(list));
        for (int i = start; i < nums.length; i++) {
            list.add(nums[i]);
            dfs(nums,i + 1);
            list.remove(list.size() - 1);
        }
    }
}