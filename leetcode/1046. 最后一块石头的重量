class Solution {
    public int lastStoneWeight(int[] stones) {
        int n = stones.length;
        if (n == 1) return stones[0];
        if (n == 2) return Math.abs(stones[0] - stones[1]);
        Arrays.sort(stones);
        if (stones[n - 3] == 0) {
            return stones[n - 1] - stones[n - 2];
        }
        stones[n - 1] = stones[n - 1] -stones[n - 2];
        stones[n - 2] = 0;
        return lastStoneWeight(stones);
    }
}

class Solution {
    static Comparator<Integer> cmp = new Comparator<Integer>() {
        public int compare(Integer o1, Integer o2) {
            return o2-o1;
        }
    };
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(cmp);
        for (int x : stones) {
            pq.offer(x);
        }
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            if (x != y) {
                pq.offer(x - y);
            }
        }
        if (pq.size() == 1) {
            return pq.poll();
        }
        return 0;
    }
}