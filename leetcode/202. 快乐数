class Solution {
    public boolean isHappy(int n) {
        Set<Integer> set = new HashSet<>();
        while (n != 1 && !set.contains(n)) {
            set.add(n);
            int sum = 0;
            while (n > 0) {
                int a = n % 10;
                sum += a * a;
                n /= 10;
            }
            n = sum;
        }
        return n == 1;
    }
}


//快慢指针
class Solution {
    public boolean isHappy(int n) {
        int slow = n;
        int fast = Next(n);
        while (slow != 1 && slow !=fast) {
            slow = Next(slow);
            fast = Next(Next(fast));
        }
        return slow == 1;
    }
    public int Next(int n) {
        int sum = 0;
        while (n > 0) {
            int a = n % 10;
            sum += a * a;
            n /= 10;
        }
        return sum;
    }
}
我觉得这道题用快慢指针不太行，我觉得作者的解法存在一个漏洞，因为fast指针每次跳2格，有可能它直接跳过了1（假设1也在那个环中）的那个情况
然后通过环直接追上slow，那么此时也是返回false
如果得到1的话，那1的下一个数还是1，等于1就退出循环并且返回true了