//BFS
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> qe = new LinkedList<>();
        qe.offer(root);
        int left = root.val;
        while (!qe.isEmpty()) {
            int size = qe.size();
            for (int i = 0; i < size; i++) {
                TreeNode cur = qe.poll();
                if (i == 0) {
                    left = cur.val;
                }
                if (cur.left != null) {
                    qe.offer(cur.left);
                }
                if (cur.right != null) {
                    qe.offer(cur.right);
                }
            }
        }
        return left;
    }
}
//Dfs
class Solution {
    int value = 0;
    int deepmax = -1;
    public int findBottomLeftValue(TreeNode root) {
        value = root.val;
        find(root,0);
        return value;
    }
    public void find(TreeNode root,int deep) {
        if (root == null) return;
        if (root.left == null && root.right == null) {
            if (deep > deepmax) {
                value = root.val;
                deepmax = deep;
            }
        }
        find(root.left,deep + 1);
        find(root.right,deep + 1);
    }
}