public class Solution {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        if (pRoot == null) {
            return result;
        }
        Queue<TreeNode> qe = new LinkedList<>();
        Stack<TreeNode> st = new Stack<>();
        qe.offer(pRoot);
        int d = 1;
        while (!qe.isEmpty()) {
            int size = qe.size();
            ArrayList<Integer> list = new ArrayList<>();
            while (size > 0) {
                TreeNode cur = qe.poll();
                if (d == 1) {
                    list.add(cur.val);
                }else {
                    st.push(cur);
                }
                if (cur.left != null) {
                    qe.offer(cur.left);
                }
                if (cur.right != null) {
                    qe.offer(cur.right);
                }
                size--;
            }
            while (!st.isEmpty()) {
                list.add(st.pop().val);
            }
            d = (d == 1) ? 0 : 1;
            result.add(list);
        }
        return result;
    } 
}